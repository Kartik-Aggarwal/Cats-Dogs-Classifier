const Dashboard = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [open, setOpen] = React.useState(false);
  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <Box m="20px">
          
      {/* HEADER */}
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Header title="DASHBOARD" subtitle="Welcome to your dashboard" />

        <Box>
          
          <Button
            sx={{
              backgroundColor: colors.blueAccent[700],
              color: colors.grey[100],
              fontSize: "14px",
              fontWeight: "bold",
              padding: "10px 20px",
            }}
          >
            <DownloadOutlinedIcon sx={{ mr: "10px" }} />
            Download Reports
          </Button>
        </Box>
      </Box>
      <TopbarMini />
      {/* GRID & CHARTS */}
      
      <Box
        display="grid"
        gridTemplateColumns="repeat(12, 1fr)"
        gridAutoRows="140px"
        gap="20px"
      >
        <React.Fragment>
        {/* ROW 1 */}
        <Box
          gridColumn="span 3"
          backgroundColor={colors.primary[400]}
          display="flex"
          alignItems="center"
          justifyContent="center"
          onClick={handleClickOpen}
        >
          <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
        fullWidth={true}
        maxWidth='xl'
      >
        <DialogTitle  id="alert-dialog-title">
        </DialogTitle>
        <DialogContent>
        <Contacts />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Disagree</Button>
          <Button onClick={handleClose} autoFocus>
            Agree
          </Button>
        </DialogActions>
      </Dialog>

          <StatBox
            title="12,361"
            subtitle="Emails Sent"
            progress="0.75"
            increase="+14%"
            icon={
              <EmailIcon
                sx={{ color: colors.greenAccent[600], fontSize: "26px" }}
              />
            }
          />
      
        </Box>
        </React.Fragment>
      </Box>
    </Box>
  );
};

export default Dashboard;




from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

def fetch_copilot_code(prompt):
    # Launch Microsoft Copilot website
    driver = webdriver.Chrome()  # Change to appropriate webdriver for your browser
    driver.get("https://copilot.github.com/")
    time.sleep(5)  # Wait for the page to load

    # Input the prompt into the editor
    editor = driver.find_element_by_css_selector(".view-lines")
    editor.click()  # Ensure focus on editor
    editor.send_keys(prompt)

    # Wait for Copilot to generate code (adjust wait time if needed)
    time.sleep(10)

    # Retrieve the generated code
    generated_code = driver.find_element_by_css_selector(".view-lines").text

    # Close the browser window
    driver.quit()

    return generated_code

# Example usage
prompt_text = "Generate a Python function to calculate the factorial of a number."
generated_code = fetch_copilot_code(prompt_text)
print("Generated Code:")
print(generated_code)



Cannot read properties of undefined (reading 'filter')
TypeError: Cannot read properties of undefined (reading 'filter')
    at http://localhost:3000/static/js/bundle.js:36607:89
    at mountMemo (http://localhost:3000/static/js/bundle.js:83359:23)
    at Object.useMemo (http://localhost:3000/static/js/bundle.js:83744:20)
    at useMemo (http://localhost:3000/static/js/bundle.js:106117:25)
    at be (http://localhost:3000/static/js/bundle.js:36606:57)
    at We (http://localhost:3000/static/js/bundle.js:37223:12)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:82587:22)
    at mountIndeterminateComponent (http://localhost:3000/static/js/bundle.js:85871:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:87167:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:72183:18)
