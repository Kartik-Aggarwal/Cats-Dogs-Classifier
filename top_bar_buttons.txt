  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setAnchorEl(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);


Cannot read properties of undefined (reading 'main')
TypeError: Cannot read properties of undefined (reading 'main')
    at http://localhost:3000/main.76f869eeffc6e4c14364.hot-update.js:258:54
    at processStyleArg (http://localhost:3000/static/js/bundle.js:19587:67)
    at http://localhost:3000/static/js/bundle.js:19693:25
    at handleInterpolation (http://localhost:3000/static/js/bundle.js:7355:24)
    at serializeStyles (http://localhost:3000/static/js/bundle.js:7459:15)
    at http://localhost:3000/static/js/bundle.js:7770:91
    at http://localhost:3000/static/js/bundle.js:6630:12
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:73044:22)
    at updateForwardRef (http://localhost:3000/static/js/bundle.js:75613:24)
    at beginWork (http://localhost:3000/static/js/bundle.js:77660:20)



Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: C:\D\Dashboard\react-admin1\src\components\TempTopbar.jsx: JSX value should be either an expression or a quoted JSX text. (28:36)

  26 |
  27 |   return (
> 28 |     <AppBar position="static" color=colors.greenAccent[500]>
     |                                     ^
  29 |       <Toolbar>
  30 |         <Button aria-controls="simple-menu" aria-haspopup="true" onClick={handleClick} color="inherit">
  31 |           Menu



Converting circular structure to JSON
    --> starting at object with constructor 'HTMLDivElement'
    |     property '__reactFiber$b5hijrmie3s' -> object with constructor 'FiberNode'
    --- property 'stateNode' closes the circle
TypeError: Converting circular structure to JSON
    --> starting at object with constructor 'HTMLDivElement'
    |     property '__reactFiber$b5hijrmie3s' -> object with constructor 'FiberNode'
    --- property 'stateNode' closes the circle
    at JSON.stringify (<anonymous>)
    at getInvalidPathError (http://localhost:3000/static/js/bundle.js:35607:118)
    at resolveTo (http://localhost:3000/static/js/bundle.js:35659:59)
    at http://localhost:3000/static/js/bundle.js:90615:76
    at handleClose (http://localhost:3000/static/js/bundle.js:1949:5)
    at http://localhost:3000/static/js/bundle.js:9144:7
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:62640:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:62684:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:62741:35)
    at invokeGuardedCallbackAndCatchFirstError (http://localhost:3000/static/js/bundle.js:62755:29)


import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Button from '@mui/material/Button';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import { tokens } from "../theme";
import { useTheme } from "@mui/material";


function TempTopBar() {
  const [anchorEl, setAnchorEl] = useState(null);
  const history = useNavigate();
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = (page) => {
    setAnchorEl(null);
    history (page); // Navigate to the selected page
  };

  return (
    <AppBar position="static">
      <Toolbar>
        <Button aria-controls="simple-menu" aria-haspopup="true" onClick={handleClick} color="inherit">
          Menu
        </Button>
        <Menu
          id="simple-menu"
          anchorEl={anchorEl}
          keepMounted
          open={Boolean(anchorEl)}
          onClose={handleClose}
        >
          <MenuItem onClick={() => handleClose('/home')}>Home</MenuItem>
          <MenuItem onClick={() => handleClose('/about')}>About</MenuItem>
          <MenuItem onClick={() => handleClose('/contact')}>Contact</MenuItem>
        </Menu>
      </Toolbar>
    </AppBar>
  );
}

export default TempTopBar;





Converting circular structure to JSON
    --> starting at object with constructor 'HTMLDivElement'
    |     property '__reactFiber$iirz8gqk8ja' -> object with constructor 'FiberNode'
    --- property 'stateNode' closes the circle
TypeError: Converting circular structure to JSON
    --> starting at object with constructor 'HTMLDivElement'
    |     property '__reactFiber$iirz8gqk8ja' -> object with constructor 'FiberNode'
    --- property 'stateNode' closes the circle
    at JSON.stringify (<anonymous>)
    at getInvalidPathError (http://localhost:3000/static/js/bundle.js:35845:118)
    at resolveTo (http://localhost:3000/static/js/bundle.js:35897:59)
    at http://localhost:3000/static/js/bundle.js:90853:76
    at handleClose (http://localhost:3000/static/js/bundle.js:1950:5)
    at http://localhost:3000/static/js/bundle.js:9152:7
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:62878:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:62922:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:62979:35)
    at invokeGuardedCallbackAndCatchFirstError (http://localhost:3000/static/js/bundle.js:62993:29)




export 'useHistory' (imported as 'useHistory') was not found in 'react-router-dom' (possible exports: AbortedDeferredError, Await, BrowserRouter, Form, HashRouter, Link, MemoryRouter, NavLink, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, ScrollRestoration, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_FetchersContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_ViewTransitionContext, UNSAFE_useRouteId, UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, createSearchParams, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, unstable_HistoryRouter, unstable_usePrompt, unstable_useViewTransitionState, useActionData, useAsyncError, useAsyncValue, useBeforeUnload, useBlocker, useFetcher, useFetchers, useFormAction, useHref, useInRouterContext, useLinkClickHandler, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes, useSearchParams, useSubmit)



import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Button from '@mui/material/Button';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';

function TopBar() {
  const [anchorEl, setAnchorEl] = useState(null);
  const history = useHistory();

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = (page) => {
    setAnchorEl(null);
    history.push(page); // Navigate to the selected page
  };

  return (
    <AppBar position="static">
      <Toolbar>
        <Button aria-controls="simple-menu" aria-haspopup="true" onClick={handleClick} color="inherit">
          Menu
        </Button>
        <Menu
          id="simple-menu"
          anchorEl={anchorEl}
          keepMounted
          open={Boolean(anchorEl)}
          onClose={handleClose}
        >
          <MenuItem onClick={() => handleClose('/home')}>Home</MenuItem>
          <MenuItem onClick={() => handleClose('/about')}>About</MenuItem>
          <MenuItem onClick={() => handleClose('/contact')}>Contact</MenuItem>
        </Menu>
      </Toolbar>
    </AppBar>
  );
}

export default TopBar;



const handleClose = () => {
    setAnchorEl(null);
  };

export 'useHistory' (imported as 'useHistory') was not found in 'react-router-dom' (possible exports: AbortedDeferredError, Await, BrowserRouter, Form, HashRouter, Link, MemoryRouter, NavLink, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, ScrollRestoration, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_FetchersContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_ViewTransitionContext, UNSAFE_useRouteId, UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, createSearchParams, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, unstable_HistoryRouter, unstable_usePrompt, unstable_useViewTransitionState, useActionData, useAsyncError, useAsyncValue, useBeforeUnload, useBlocker, useFetcher, useFetchers, useFormAction, useHref, useInRouterContext, useLinkClickHandler, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes, useSearchParams, useSubmit)



import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';

<Stack spacing={2} direction="row">
            {/* <Button variant="text">Text</Button> */}
            <Button variant="contained" onClick={() => {alert('clicked');}}>Contained</Button>
            {/* <Button variant="outlined">Outlined</Button> */}
</Stack>
