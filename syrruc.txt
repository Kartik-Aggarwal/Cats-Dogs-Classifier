{selectedOption === 'DC201' && <ExcelTableNS filePath={table1}/><ExcelTableNS filePath={table3}/>}


<Button variant="outlined" onClick={handleClick3} size='large' sx={{backgroundColor: '#FFE8E1', transition: 'background-color 0.3s color 0.3s', '&:hover': {boxShadow:4, backgroundColor: '#FF670B', color: 'white'}}}><b>Distribution Centers Details</b></Button>



PS C:\Users\rishabh188134\Documents\IDEAS> npx create-react-app webpage1
npm ERR! code ENOENT
npm ERR! syscall lstat
npm ERR! path C:\Users\rishabh188134\AppData\Roaming\npm
npm ERR! errno -4058
npm ERR! enoent ENOENT: no such file or directory, lstat 'C:\Users\rishabh188134\AppData\Roaming\npm'  
npm ERR! enoent This is related to npm not being able to find a file.
npm ERR! enoent
 
npm ERR! A complete log of this run can be found in: C:\Users\rishabh188134\AppData\Local\npm-cache\_logs\2024-04-30T07_41_19_775Z-debug-0.log


import React, { useState } from 'react';
import { Button, Box, Checkbox, FormControlLabel, CircularProgress } from '@mui/material';

const RealtimeChecklist = () => {
  // State to manage whether the checklist should be visible
  const [showChecklist, setShowChecklist] = useState(false);
  // State to manage the checked state of each item
  const [checkedItems, setCheckedItems] = useState({
    item1: false,
    item2: false,
    item3: false,
    item4: false,
    item5: false,
  });
  // State to manage the loading state of checking items
  const [checkingItems, setCheckingItems] = useState(false);

  // Function to handle the "Check inputs" button click
  const handleCheckInputsClick = () => {
    // Show the checklist
    setShowChecklist(true);
    // Set loading state
    setCheckingItems(true);

    // Simulate real-time checking with a delay
    setTimeout(() => {
      setCheckingItems(false);
      setCheckedItems((prevCheckedItems) => ({
        ...prevCheckedItems,
        item1: true,
      }));
      setTimeout(() => {
        setCheckedItems((prevCheckedItems) => ({
          ...prevCheckedItems,
          item2: true,
        }));
        setTimeout(() => {
          setCheckedItems((prevCheckedItems) => ({
            ...prevCheckedItems,
            item3: true,
          }));
          setTimeout(() => {
            setCheckedItems((prevCheckedItems) => ({
              ...prevCheckedItems,
              item4: true,
            }));
            setTimeout(() => {
              setCheckedItems((prevCheckedItems) => ({
                ...prevCheckedItems,
                item5: true,
              }));
            }, 1000);
          }, 1000);
        }, 1000);
      }, 1000);
    }, 1000);
  };

  return (
    <div>
      <Button variant="contained" onClick={handleCheckInputsClick} disabled={showChecklist}>
        Check inputs
      </Button>
      <Box>
        <FormControlLabel
          control={<Checkbox checked={checkedItems.item1} sx={{ '&.Mui-checked': { color: 'green' } }} />}
          label="Item 1"
          disabled={showChecklist || checkingItems}
        />
        <FormControlLabel
          control={<Checkbox checked={checkedItems.item2} sx={{ '&.Mui-checked': { color: 'green' } }} />}
          label="Item 2"
          disabled={showChecklist || checkingItems}
        />
        <FormControlLabel
          control={<Checkbox checked={checkedItems.item3} sx={{ '&.Mui-checked': { color: 'green' } }} />}
          label="Item 3"
          disabled={showChecklist || checkingItems}
        />
        <FormControlLabel
          control={<Checkbox checked={checkedItems.item4} sx={{ '&.Mui-checked': { color: 'green' } }} />}
          label="Item 4"
          disabled={showChecklist || checkingItems}
        />
        <FormControlLabel
          control={<Checkbox checked={checkedItems.item5} sx={{ '&.Mui-checked': { color: 'green' } }} />}
          label="Item 5"
          disabled={showChecklist || checkingItems}
        />
      </Box>
      {checkingItems && <CircularProgress />} {/* Show loading indicator while checking items */}
    </div>
  );
};

export default RealtimeChecklist;






import React, { useState } from 'react';

const UploadButton = () => {
  const [selectedFile, setSelectedFile] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setSelectedFile(file);
    // Redirect to '/optimizer' after file selection
    window.location.href = '/optimizer';
  };

  return (
    <div>
      <input type="file" onChange={handleFileChange} />
      <button onClick={() => setSelectedFile(null)}>Clear File</button>
    </div>
  );
};

export default UploadButton;






const handleFileUpload = () => {
    // Trigger file input click event
    document.getElementById('fileInput').click();
  };

  const handleFileChange = (event) => {
    // Handle file selection
    const selectedFile = event.target.files[0];
    console.log('Selected File:', selectedFile);
    // You can perform further operations with the selected file here
  };

                <>
                <input
                    type="file"
                    id="fileInput"
                    style={{ display: 'none' }}
                    onChange={handleFileChange}
                />
                </>


                {/* <InputBase sx={{ ml: 2, flex: 1 }} placeholder="Search" /> */}
                <Stack spacing={5} direction="row" p={1}>
                    {/* <Button variant="text">Text</Button> */}
                    <Button variant="outlined" onClick={handleFileUpload} size='large' style={{fontSize: '16px'}} sx={{width: 310, height: 50 , marginLeft: 2}}><b>Upload Demand Data</b></Button>
                    {/* <BasicMenu /> */}
                    {/* <Button variant="outlined">Outlined</Button> */}
                </Stack>




import React from 'react';
import Button from '@mui/material/Button';

const FileUploadButton = () => {
  const handleFileUpload = () => {
    // Trigger file input click event
    document.getElementById('fileInput').click();
  };

  const handleFileChange = (event) => {
    // Handle file selection
    const selectedFile = event.target.files[0];
    console.log('Selected File:', selectedFile);
    // You can perform further operations with the selected file here
  };

  return (
    <>
      {/* Hidden file input */}
      <input
        type="file"
        id="fileInput"
        style={{ display: 'none' }}
        onChange={handleFileChange}
      />
      {/* Visible button to trigger file input click */}
      <Button variant="outlined" onClick={handleFileUpload}>
        Choose File
      </Button>
    </>
  );
};

export default FileUploadButton;



import React, { useState } from 'react';
import { Button, CircularProgress } from '@mui/material';
import Table from './Table'; // Assuming Table is the component you want to render

const RunButton = () => {
  // State to manage the loading state of running
  const [running, setRunning] = useState(false);

  // Function to handle the "Run" button click
  const handleRunClick = () => {
    // Set running state
    setRunning(true);

    // Simulate running with a delay
    setTimeout(() => {
      setRunning(false);
    }, 3000); // Simulating a 3-second delay for fake loading
  };

  return (
    <div style={{ textAlign: 'center' }}>
      <Button
        variant="contained"
        onClick={handleRunClick}
        disabled={running}
        sx={{ mt: 2, bgcolor: 'primary.main', color: 'primary.contrastText', '&:hover': { bgcolor: 'primary.dark' } }}
      >
        {running ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Run'}
      </Button>
      {running && <p style={{ marginTop: '10px' }}>Running...</p>}
      {!running && <Table />} {/* Render the Table component after running completes */}
    </div>
  );
};

export default RunButton;



import React, { useState } from 'react';
import { Button, Box, Checkbox, FormControlLabel, CircularProgress, Typography, Grid } from '@mui/material';

const RealtimeChecklist = () => {
  // State to manage whether the checklist should be visible
  const [showChecklist, setShowChecklist] = useState(false);
  // State to manage the checked state of each item
  const [checkedItems, setCheckedItems] = useState({
    item1: false,
    item2: false,
    item3: false,
    item4: false,
    item5: false,
    item6: false, // Add item6
  });
  // State to manage the loading state of checking items
  const [checkingItems, setCheckingItems] = useState(false);

  // Function to handle the "Check inputs" button click
  const handleCheckInputsClick = () => {
    // Show the checklist
    setShowChecklist(true);
    // Set loading state
    setCheckingItems(true);

    // Simulate real-time checking with a delay
    setTimeout(() => {
      setCheckingItems(false);
      setCheckedItems({
        item1: true,
        item2: true,
        item3: true,
        item4: true,
        item5: true,
        item6: true, // Set item6 to true
      });
    }, 1000 * 6); // 1 second delay for each of the 6 items
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <Button
        variant="contained"
        onClick={handleCheckInputsClick}
        disabled={showChecklist}
        sx={{ mt: 2, bgcolor: 'primary.main', color: 'primary.contrastText', '&:hover': { bgcolor: 'primary.dark' } }}
      >
        Check inputs
      </Button>
      {showChecklist && (
        <Box sx={{ mt: 2 }}>
          <Typography variant="h6">Checklist</Typography>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={<Checkbox checked={checkedItems.item1} sx={{ '&.Mui-checked': { color: 'green' } }} />}
                label="Item 1"
                disabled={checkingItems}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={<Checkbox checked={checkedItems.item2} sx={{ '&.Mui-checked': { color: 'green' } }} />}
                label="Item 2"
                disabled={checkingItems}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={<Checkbox checked={checkedItems.item3} sx={{ '&.Mui-checked': { color: 'green' } }} />}
                label="Item 3"
                disabled={checkingItems}
              />
            </Grid>
          </Grid>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={<Checkbox checked={checkedItems.item4} sx={{ '&.Mui-checked': { color: 'green' } }} />}
                label="Item 4"
                disabled={checkingItems}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={<Checkbox checked={checkedItems.item5} sx={{ '&.Mui-checked': { color: 'green' } }} />}
                label="Item 5"
                disabled={checkingItems}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControlLabel
                control={<Checkbox checked={checkedItems.item6} sx={{ '&.Mui-checked': { color: 'green' } }} />}
                label="Item 6"
                disabled={checkingItems}
              />
            </Grid>
          </Grid>
        </Box>
      )}
      {checkingItems && <CircularProgress sx={{ mt: 2 }} />} {/* Show loading indicator while checking items */}
    </Box>
  );
};

export default RealtimeChecklist;
