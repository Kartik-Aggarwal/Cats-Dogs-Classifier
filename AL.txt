Each location must be visited exactly once
Sales rep must return to starting location
Time window constraints
Capacity constraints if sales rep is carrying goods
Vehicle specific and traffic specific constraints such as maximum speed, weight limit or fuel constraints


// src/Advantages.js

import React from 'react';

const Advantages = ({ advantages }) => {
  return (
    <div>
      <h2>Key Advantages</h2>
      <ul>
        {advantages.map((advantage, index) => (
          <li key={index}>{advantage}</li>
        ))}
      </ul>
    </div>
  );
};

export default Advantages;


// src/App.js

import React from 'react';
import Advantages from './Advantages';

const App = () => {
  const advantagesList = [
    "Cost reduction due to the most efficient routes meeting demand and constraints",
    "Improved customer satisfaction and retention through meeting delivery windows and providing accurate ETA",
    "Enhanced performance for drivers through reducing driving time and stress",
    "Increased sustainability by lowering CO2 emissions, noise pollution, and congestion",
    "Dynamic routing can help support green initiatives such as electric vehicles or low-emission zones"
  ];

  return (
    <div>
      <h1>Delivery Optimization Advantages</h1>
      <Advantages advantages={advantagesList} />
    </div>
  );
};

export default App;








Minimize total distance travelled by sales representative:
Route optimization aims to reduce the total distance travelled by a sales representative by intelligently planning the sequence of stops. Using algorithms like the Traveling Salesman Problem (TSP), the system can determine the shortest path that covers all stops efficiently. This reduces fuel costs and time spent on the road, ultimately improving productivity and customer service.
Minimize time taken to complete the route:
Efficiency in logistics requires minimizing the time taken to complete a route. By considering factors such as traffic patterns and optimal sequencing of stops, route optimization software can calculate the quickest route. This reduces delivery times and enables sales representatives to attend more meetings or visits within a given time frame, enhancing overall operational efficiency.
Accommodate dynamic changes in the route efficiently to adapt to real-time conditions:
Real-time adaptability is crucial in logistics due to unforeseen events like traffic congestion or new customer requests. Route optimization systems employ dynamic algorithms that can swiftly recalculate routes based on changing conditions. This adaptability ensures that sales representatives can adjust their routes on-the-go, maintaining efficiency and customer satisfaction while responding promptly to evolving circumstances.









import React, { useState } from 'react';
import { Card, CardContent, Typography } from '@mui/material';
import './FlipCard.css'; // Import CSS for styling

const FlipCard = () => {
  const [isFlipped, setIsFlipped] = useState(false);

  const handleCardFlip = () => {
    setIsFlipped(!isFlipped);
  };

  return (
    <Card
      className={`card ${isFlipped ? 'is-flipped' : ''}`}
      onMouseEnter={handleCardFlip}
      onMouseLeave={handleCardFlip}
    >
      <div className="card-inner">
        <CardContent>
          <Typography variant="h5" component="div">
            {isFlipped ? 'Back Content' : 'Front Content'}
          </Typography>
        </CardContent>
      </div>
    </Card>
  );
};

export default FlipCard;




.card {
  width: 200px;
  height: 200px;
  perspective: 1000px;
  transition: transform 0.6s;
}

.card-inner {
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.6s;
  transform-style: preserve-3d;
}

.card.is-flipped .card-inner {
  transform: rotateY(180deg);
}

.card-front,
.card-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}

.card-back {
  transform: rotateY(180deg);
}




const Item = ({ title, to, icon, selected, setSelected }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  return (
    <MenuItem
      active={selected === title}
      style={{
        color: colors.grey[100],
      }}
      onClick={() => setSelected(title)}
      icon={icon}
    >
      <Typography>{title}</Typography>
      <Link to={to} />
    </MenuItem>
  );
};



const Sidebar = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [selected, setSelected] = useState("Dashboard");

  return (
    <Box
      sx={{
        "& .pro-sidebar-inner": {
          background: `${colors.primary[400]} !important`,
        },
        "& .pro-icon-wrapper": {
          backgroundColor: "transparent !important",
        },
        "& .pro-inner-item": {
          padding: "5px 35px 5px 20px !important",
        },
        "& .pro-inner-item:hover": {
          color: "#868dfb !important",
        },
        "& .pro-menu-item.active": {
          color: "#6870fa !important",
        },
      }}
    >
      <ProSidebar collapsed={isCollapsed}>
        <Menu iconShape="square">
          {/* LOGO AND MENU ICON */}
          <MenuItem
            onClick={() => setIsCollapsed(!isCollapsed)}
            icon={isCollapsed ? <MenuOutlinedIcon /> : undefined}
            style={{
              margin: "10px 0 20px 0",
              color: colors.grey[100],
            }}
          >
            {!isCollapsed && (
              <Box
                display="flex"
                justifyContent="space-between"
                alignItems="center"
                ml="15px"
              >
                <Typography variant="h3" color={colors.grey[100]}>
                  ADMINS
                </Typography>
                <IconButton onClick={() => setIsCollapsed(!isCollapsed)}>
                  <MenuOutlinedIcon />
                </IconButton>
              </Box>
            )}
          </MenuItem>

          {!isCollapsed && (
            <Box mb="25px">
              <Box display="flex" justifyContent="center" alignItems="center">
                <img
                  alt="profile-user"
                  width="100px"
                  height="100px"
                  src={`../../assets/towers.jpg`}
                  style={{ cursor: "pointer", borderRadius: "50%" }}
                />
              </Box>
              <Box textAlign="center">
                <Typography
                  variant="h2"
                  color='#fb4e0b'
                  fontWeight="bold"
                  sx={{ m: "10px 0 0 0" }}
                >
                  EXL
                </Typography>
                <Typography variant="h5" color={colors.primary[100]}>
                  Lorem ipsum
                </Typography>
              </Box>
            </Box>
          )}

          <Box paddingLeft={isCollapsed ? undefined : "10%"}>
          

            <Item
              title="Home"
              to="/"
              icon={<HomeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />

            <Typography
              variant="h6"
              color={colors.grey[300]}
              sx={{ m: "15px 0 5px 20px" }}
            >
              Route Optimisation
            </Typography>
            <Item
              title="Inventory"
              to="/inventory"
              icon={<PeopleOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="WorkQueues"
              to="/work_queues"
              icon={<ContactsOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="Data Explorer"
              to="/data_explorer"
              icon={<ReceiptOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />

          </Box>
        </Menu>
      </ProSidebar>
    </Box>
  );
};

export default Sidebar;





import React, { useState } from 'react';
import './InputSearch.css'; // Import the CSS file

function InputSearch() {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [searchResult, setSearchResult] = useState(null);

  const data = [
    { name: 'John Doe', value: '123 Main Street' },
    { name: 'Jane Smith', value: '456 Elm Street' },
    { name: 'Alice Johnson', value: '789 Oak Avenue' },
  ];

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleAddressChange = (event) => {
    setAddress(event.target.value);
  };

  const search = () => {
    const searchString = `${name} - ${address}`;
    const foundItem = data.find((item) => item.name === searchString);
    setSearchResult(foundItem ? foundItem.value : 'Not Found');
  };

  return (
    <div className="input-search">
      <div className="input-row">
        <label htmlFor="name">Name:</label>
        <input type="text" id="name" placeholder="Enter Name" value={name} onChange={handleNameChange} />
      </div>
      <div className="input-row">
        <label htmlFor="address">Address:</label>
        <input type="text" id="address" placeholder="Enter Address" value={address} onChange={handleAddressChange} />
      </div>
      <button className="search-button" onClick={search}>
        Search
      </button>
      <p className="search-result">Search Result: {searchResult}</p>
    </div>
  );
}

export default InputSearch;




.input-search {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
  margin: 20px 0;
}

.input-row {
  display: flex;
  margin-bottom: 10px;
  align-items: center;
}

.input-row label {
  margin-right: 10px;
  font-weight: bold;
}

.search-button {
  padding: 10px 20px;
  background-color: #4CAF50; /* Green */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-top: 10px;
}

.search-result {
  font-weight: bold;
  margin-top: 10px;
}




import React, { useState, useEffect } from 'react';
const XLSX = require('xlsx'); // Assuming you have `xlsx` installed using npm or yarn

function InputSearch() {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [searchResult, setSearchResult] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const workbook = XLSX.readFile('path/to/your/excel_file.xlsx'); // Replace with your file path
      const sheetName = workbook.SheetNames[0]; // Get the first sheet
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_object(worksheet); // Convert sheet to object array
      setData(data);
    };

    fetchData();
  }, []);

  const [data, setData] = useState([]);

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleAddressChange = (event) => {
    setAddress(event.target.value);
  };

  const search = () => {
    const searchString = `${name} - ${address}`;
    const foundItem = data.find((item) => item.name === searchString);
    setSearchResult(foundItem ? foundItem.value : 'Not Found');
  };

  return (
    <div>
      <input type="text" placeholder="Name" value={name} onChange={handleNameChange} />
      <input type="text" placeholder="Address" value={address} onChange={handleAddressChange} />
      <button onClick={search}>Search</button>
      <p>Search Result: {searchResult}</p>
    </div>
  );
}

export default InputSearch;
