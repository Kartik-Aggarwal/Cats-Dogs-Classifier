import React, { useState } from 'react';
import { TextField, Button, Typography, Paper, Box, Grid } from '@mui/material';

const SearchComponent = () => {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [searchResult, setSearchResult] = useState('');
  const [category, setCategory] = useState('');
  const [subcategory, setSubcategory] = useState('');
  const [accessorial, setAccessorial] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');

  const handleSearch = async () => {
    const combinedString = name + ' ' + address;

    // Call generateContent() function from the other code
    await generateContent(combinedString);
  };

  // Your JSX code for the SearchComponent
};

export default SearchComponent;







const {VertexAI} = require('@google-cloud/vertexai');
 
// Initialize Vertex with your Cloud project and location
const vertex_ai = new VertexAI({project: 'eci-ugi-analytics-ttlvertexpoc', location: 'us-central1'});
const model = 'gemini-1.5-pro-preview-0409';
 
// Instantiate the models
const generativeModel = vertex_ai.preview.getGenerativeModel({
  model: model,
  generationConfig: {
    'maxOutputTokens': 8192,
    'temperature': 1,
    'topP': 0.95,
  },
  safetySettings: [
    {
        'category': 'HARM_CATEGORY_HATE_SPEECH',
        'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
    },
    {
        'category': 'HARM_CATEGORY_DANGEROUS_CONTENT',
        'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
    },
    {
        'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
    },
    {
        'category': 'HARM_CATEGORY_HARASSMENT',
        'threshold': 'BLOCK_MEDIUM_AND_ABOVE'
    }
  ],
});
 
const text1_1 = {text: `LTL ACCESSORIAL RSD(RESIDENTIAL DELIVERY), DMS , RSD APPLIES TO ALL SHIPEMENTS GOING TO Amusement parks, bars, car dealerships, car washes, camps or campgrounds, cemeteries,
 convenience stores, country clubs (golf, tennis, or other), day cares or preschools, gas stations, grocery warehouses,
 hospitals, lodging facilities (hotels, motels, resorts, etc.), medical centers, medical clinics, nursing/retirement/assisted living facilities,
 parks, places of worship ((i.e., churches, synagogues, mosques, temples, etc.); restaurants, RV parks, schools (elementary, middle, high school),
 college,university,self-storage facilities (warehouses or storage units), ski resorts or other recreational revineyards or wineries,ingle family houses,
 multi-family houses, duplexes, fourplexes, apartments, flats, condominiums, town homes, cooperatives, manufactured homes, mobile homes, tiny homes, cabins,
 lake houses, beach houses, farms, estates
DMS applied to all shipeemnts going to Government sites,Government Building,correctional facilities, natural gas facilities, oil fields,
 airport,mines,United States Post Office/Canada Post facilities,Military bases and military locations,
 missile sites,Military and civilian radio, Aviation,electronic stations,Government research stations,Fire stations,
 police stations,public service stations. State or National Parks, or other park managed by a governmental entity such as a county or municipality,
 prisons, jails, detention centers`};
const text2_1 = {text: `FOR THE GIVEN ADDRESS TOYOTA MOTOR MFG TX 15800 APPLEWHITE RD SAN ANTONIO TX  78264 PROVIDE CATEGORY,SUBCATEGORY,SHORT SUMMARY first and on the basis of category an d subcategory can you judge which accessorial should be applied`};
const text3_1 = {text: `FOR THE GIVEN ADDRESS TOYOTA MOTOR MFG TX 15800 APPLEWHITE RD SAN ANTONIO TX 78264 PROVIDE CATEGORY,SUBCATEGORY,SHORT SUMMARY first and on the basis of category an d subcategory can you judge predict with atmost accuracy  which accessorial should be applied rsd/dms/other`};
const text5_1 = {text: `COMFORT SUITES AIRPORT     1401 WOODWARD RD SE ALBUQUERQUE NM 87106 provide category, subcategory, accessorial`};
 
const chat = generativeModel.startChat({});
 
async function sendMessage(message) {
  const streamResult = await chat.sendMessageStream(message);
  process.stdout.write('stream result: ' + JSON.stringify((await streamResult.response).candidates[0].content) + '\n');
}
 
async function generateContent() {
  await sendMessage([
    text1_1
  ]);
  await sendMessage([
    text2_1
  ]);
  await sendMessage([
    text3_1
  ]);
  await sendMessage([
    {text: `no rsd/dms cannot be applied to this as this is manufacturong facility`}
  ]);
  await sendMessage([
    text5_1
  ]);
  await sendMessage([
    {text: `FERGUSON INTEGRATED SYSTEMS     22541 A ST-STROTHER FIELD WINFIELD KS 67156`}
  ]);
  await sendMessage([
    {text: `MONTANA RESOURCES     600 SHIELDS AVE BUTTE MT 59701`}
  ]);
  await sendMessage([
    {text: `LOCKHEED RMS     6900 MAIN ST STRATFORD CT 06614`}
  ]);
}
 
generateContent();

import React, { useState } from 'react';
import { TextField, Button, Typography, Paper, Box, Grid } from '@mui/material';

const SearchComponent = () => {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [searchResult, setSearchResult] = useState('');
  const [category, setCategory] = useState('');
  const [subcategory, setSubcategory] = useState('');
  const [accessorial, setAccessorial] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');

  const handleSearch = () => {
    const combinedString = name + ' ' + address;

        fetch('http://127.0.0.1:5000/search', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ data: combinedString }) // Your data here
        })
        .then(response => response.json())
        .then(data => {
            console.log(data); // Handle response from backend
        })
        .catch(error => {
            console.error('Error:', error);
        });


    // Concatenate name and address
    

    // Here, you would perform the search in your Excel sheet database
    // and retrieve the corresponding description based on the combined string
    // For demonstration purposes, let's assume we have a sample database
    const sampleDatabase = [
      { combinedString: "John Doe 123 Main St", description: "**Category:** Gas station\n**Subcategory:** Convenience store\n**Accessorial (RSD/DMS):** RSD\n**Phone number:** Not provided" },
      { combinedString: "Jane Smith 456 Elm St", description: "**Category:** Restaurant\n**Subcategory:** Fast food\n**Accessorial (RSD/DMS):** DMS\n**Phone number:** 123-456-7890" },
      // Add more entries as needed
    ];

    // Search the sample database for a matching entry
    const match = sampleDatabase.find(entry => entry.combinedString === combinedString);

    if (match) {
      setSearchResult('Match found!');
      // Extract values from the description
      let arr = match.description.split('\n').filter(Boolean);
      arr.forEach(line => {
        if (line.startsWith('**Category:')) {
          setCategory(line.split(':** ')[1]);
        } else if (line.startsWith('**Subcategory:')) {
          setSubcategory(line.split(':** ')[1]);
        } else if (line.startsWith('**Accessorial (RSD/DMS):')) {
          setAccessorial(line.split(':** ')[1]);
        } else if (line.startsWith('**Phone number:')) {
          setPhoneNumber(line.split(':** ')[1]);
        }
      });
    } else {
      setSearchResult('No matching details found');
      setCategory('');
      setSubcategory('');
      setAccessorial('');
      setPhoneNumber('');
    }
  };

  return (
    <Box p={2} boxShadow={3} borderRadius={2}>
      
        <Grid item xs={12}>
          <Button variant="contained" color="primary" onClick={handleSearch}>
            Search
          </Button>
        </Grid>
      </Grid>
      <Box mt={3}>
        <Paper elevation={3} variant="outlined">
          <Box p={2}>
            <Typography variant="h4">Search Result:</Typography>
            <Typography>{searchResult}</Typography>
            {searchResult === 'Match found!' && (
              <Box mt={4}>
                <Typography variant="h4">Details:</Typography>
                <br/>
                <Typography variant="h5">Category: {category}</Typography>
                <Typography variant="h5">Subcategory: {subcategory}</Typography>
                <Typography variant="h5">Accessorial (RSD/DMS): {accessorial}</Typography>
                <Typography variant="h5">Phone number: {phoneNumber}</Typography>
              </Box>
            )}
          </Box>
        </Paper>
      </Box>
    </Box>
  );
};

export default SearchComponent;







Error: TypeError: Failed to fetch
    at handleSearch (SearchComp.jsx:16:1)
    at HTMLUnknownElement.callCallback (react-dom.development.js:4167:1)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:4217:1)
    at invokeGuardedCallback (react-dom.development.js:4280:1)
    at invokeGuardedCallbackAndCatchFirstError (react-dom.development.js:4296:1)
    at executeDispatch (react-dom.development.js:9045:1)
    at processDispatchQueueItemsInOrder (react-dom.development.js:9076:1)
    at processDispatchQueue (react-dom.development.js:9090:1)
    at dispatchEventsForPlugins (react-dom.development.js:9101:1)
    at react-dom.development.js:9292:1




import React from 'react';

class MyComponent extends React.Component {
    handleClick = () => {
        fetch('/api/submit_data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ key: 'value' }) // Your data here
        })
        .then(response => response.json())
        .then(data => {
            console.log(data); // Handle response from backend
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    render() {
        return (
            <button onClick={this.handleClick}>Submit Data</button>
        );
    }
}

export default MyComponent;








PS C:\D\Access locate\al-admin2\src\backend> node server.js
(node:20344) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version
(Use `node --trace-warnings ...` to show where the warning was created)
(node:20344) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version
Error connecting to database: MongooseServerSelectionError: connect ECONNREFUSED ::1:27017, connect ECONNREFUSED 127.0.0.1:27017
    at _handleConnectionErrors (C:\D\Access locate\al-admin2\node_modules\mongoose\lib\connection.js:875:11)
    at NativeConnection.openUri (C:\D\Access locate\al-admin2\node_modules\mongoose\lib\connection.js:826:11) {
  reason: TopologyDescription {
    type: 'Unknown',
    servers: Map(1) { 'localhost:27017' => [ServerDescription] },
    stale: false,
    compatible: true,
    heartbeatFrequencyMS: 10000,
    localThresholdMS: 15,
    setName: null,
    maxElectionId: null,
    maxSetVersion: null,
    commonWireVersion: 0,
    logicalSessionTimeoutMinutes: null
  },
  code: undefined
}



const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();

app.use(cors());
app.use(bodyParser.json());

// Define schema for search entries
const searchEntrySchema = new mongoose.Schema({
  name: String,
  address: String,
  category: String,
  subcategory: String,
  accessorial: String,
  phoneNumber: String,
  searchResult: String,
  timestamp: { type: Date, default: Date.now }
});

const SearchEntry = mongoose.model('SearchEntry', searchEntrySchema);

// Routes for CRUD operations
app.post('/search', async (req, res) => {
  try {
    const newSearchEntry = new SearchEntry(req.body);
    await newSearchEntry.save();
    res.status(201).send(newSearchEntry);
  } catch (err) {
    res.status(400).send(err);
  }
});

mongoose.connect('mongodb://localhost:27017/your-database-name', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to database');
    app.listen(3001, () => {
      console.log('Server is running on port 3001');
    });
  })
  .catch(err => console.error('Error connecting to database:', err));





import React, { useState } from 'react';
import { TextField, Button, Typography, Paper, Box, Grid } from '@mui/material';

const SearchComponent = () => {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [searchResult, setSearchResult] = useState('');
  const [category, setCategory] = useState('');
  const [subcategory, setSubcategory] = useState('');
  const [accessorial, setAccessorial] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');

  const handleSearch = async () => {
    // Concatenate name and address
    const combinedString = name + ' ' + address;

    // Here, you would perform the search in your Excel sheet database
    // and retrieve the corresponding description based on the combined string
    // For demonstration purposes, let's assume we have a sample database
    const sampleDatabase = [
      { combinedString: "John Doe 123 Main St", description: "**Category:** Gas station\n**Subcategory:** Convenience store\n**Accessorial (RSD/DMS):** RSD\n**Phone number:** Not provided" },
      { combinedString: "Jane Smith 456 Elm St", description: "**Category:** Restaurant\n**Subcategory:** Fast food\n**Accessorial (RSD/DMS):** DMS\n**Phone number:** 123-456-7890" },
      // Add more entries as needed
    ];

    // Search the sample database for a matching entry
    const match = sampleDatabase.find(entry => entry.combinedString === combinedString);

    if (match) {
      setSearchResult('Match found!');
      // Extract values from the description
      let arr = match.description.split('\n').filter(Boolean);
      arr.forEach(line => {
        if (line.startsWith('**Category:')) {
          setCategory(line.split(':** ')[1]);
        } else if (line.startsWith('**Subcategory:')) {
          setSubcategory(line.split(':** ')[1]);
        } else if (line.startsWith('**Accessorial (RSD/DMS):')) {
          setAccessorial(line.split(':** ')[1]);
        } else if (line.startsWith('**Phone number:')) {
          setPhoneNumber(line.split(':** ')[1]);
        }
      });

      // Save search entry to the backend
      try {
        const response = await fetch('http://localhost:3001/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name,
            address,
            category,
            subcategory,
            accessorial,
            phoneNumber,
            searchResult
          })
        });
        if (!response.ok) {
          console.error('Failed to save search entry');
        }
      } catch (error) {
        console.error('Error saving search entry:', error);
      }
    } else {
      setSearchResult('No matching details found');
      setCategory('');
      setSubcategory('');
      setAccessorial('');
      setPhoneNumber('');

      // Save search entry with no match to the backend
      try {
        const response = await fetch('http://localhost:3001/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name,
            address,
            searchResult
          })
        });
        if (!response.ok) {
          console.error('Failed to save search entry');
        }
      } catch (error) {
        console.error('Error saving search entry:', error);
      }
    }
  };

  return (
    <Box p={2} boxShadow={3} borderRadius={2}>
      <Typography variant="h4" align="center" gutterBottom>
        Search Component
      </Typography>
      <Grid container spacing={2} alignItems="center">
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            variant="outlined"
            label="Enter name"
            value={name}
            onChange={e => setName(e.target.value)}
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            variant="outlined"
            label="Enter address"
            value={address}
            onChange={e => setAddress(e.target.value)}
          />
        </Grid>
        <Grid item xs={12}>
          <Button variant="contained" color="primary" onClick={handleSearch}>
            Search
          </Button>
        </Grid>
      </Grid>
      <Box mt={3}>
        <Paper elevation={3} variant="outlined">
          <Box p={2}>
            <Typography variant="h6">Search Result:</Typography>
            <Typography>{searchResult}</Typography>
            {searchResult === 'Match found!' && (
              <Box mt={2}>
                <Typography variant="h6">Details:</Typography>
                <Typography>Category: {category}</Typography>
                <Typography>Subcategory: {subcategory}</Typography>
                <Typography>Accessorial (RSD/DMS): {accessorial}</Typography>
                <Typography>Phone number: {phoneNumber}</Typography>
              </Box>
            )}
          </Box>
        </Paper>
      </Box>
    </Box>
  );
};

export default SearchComponent;
